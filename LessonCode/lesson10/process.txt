我们一般把已经加载在内存中的程序叫做进程，或者一般吧正在运行的程序叫叫作进程

查看进程的操作： ps ajx | grep ...

一个操作系统，不仅仅只能运行一个进程，可以同时运行多个进程，所以操作系统需要把进程管理起来
    ｜
    ｜
    ｜
怎么管理进程？ ->   先描述，后组织！
    ｜
    ｜
    ｜
任何一个进程，加载到内存的时候，需要先创建描述进程（属性）的结构体对象
PCB --- process control block

struct 结构体
{
    进程编号
    进程的状态
    优先级
    ...
}

进程 = 描述进程pcb结构体 + 代码和数据
{
    PCB是由操作系统自己维护的  --  包含描述进程的所有属性值
    代码和数据是由我们维护的  -- 
}

在Linux中的PCB 就是 task_struct

task_struct 是linux内核中的一种数据结构，装载在RAM中并储存着进程信息

task_struct
{
    标示符: 描述本进程的唯一标示符，用来区别其他进程。

    状态: 任务状态，退出代码，退出信号等。

    优先级: 相对于其他进程的优先级。

    程序计数器: 程序中即将被执行的下一条指令的地址。

    内存指针: 包括程序代码和进程相关数据的指针，还有和其他进程共享的内存块的指针

    上下文数据: 进程执行时处理器的寄存器中的数据[休学例子，要加图CPU，寄存器]。

    I／O状态信息: 包括显示的I/O请求,分配给进程的I／O设备和被进程使用的文件列表。

    记账信息: 可能包括处理器时间总和，使用的时钟数总和，时间限制，记账号等。

    其他信息
}




